<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/public/css/style.css">
    <link rel="stylesheet" href="/public/css/modal.css" />
    <!-- flatpickr CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

    <!--<link rel="manifest" href="/manifest.json"><!--função para funcionar como app-->
    <meta name="theme-color" content="#1a73e8"><!--função para funcionar como app-->
    <title>Gerenciamento de Contas</title>

</head>

<script type="module">
    import { getDados, postDados, putDados, deleteDados } from '/public/js/utils/services.js';

    var function_atualizarSelect = false;
    var ano_select_ger_limite = 0;
    var mes_select_ger_limite = 0;

    // Definindo a função no escopo global
    window.getDadosTab = async function(ano, mes, atualizarSelect = false) {
        console.log("getDadosTab() Ano:", ano, "Mês:", mes, "Atualizar Select:", atualizarSelect);

        // Validação dos parâmetros
        if (!ano) {
            showToast("Por favor, selecione um ano válido");
            return;
        }

        const cardLimite = document.getElementById('card_total_limite');
        const cardContas = document.getElementById('card_total_contas');
        const card_total_pagas = document.getElementById('card_total_pagas');
        const card_total_pendentes = document.getElementById('card_total_pendentes');

        try {
            const data = await postDados('dados_tab', { ano, mes });

            if (data && data.sucess) {
                if (cardLimite) cardLimite.innerHTML = formatValor(data.total_limite);
                if (cardContas) cardContas.innerHTML = formatValor(data.total_contas);
                if (card_total_pagas) card_total_pagas.innerHTML = formatValor(data.total_contas_pagas);
                if (card_total_pendentes) card_total_pendentes.innerHTML = formatValor(data.total_contas_pendentes);

                atualizaSelects(data.anos, data.anoSelecionado);
                atualizaOuRecriaCards({
                    mesSelecionado: data.mesSelecionado,
                    limiteColor: data.limiteColor,
                    total_limite: data.total_limite,
                    total_contas: data.total_contas,
                    total_contas_pagas: data.total_contas_pagas,
                    total_contas_pendentes: data.total_contas_pendentes
                });

                atualizaTabela(data.contas, data.mesSelecionado);
            } else {
                console.error("Resposta inválida do servidor:", data);
                showToast(data?.message || "Erro ao atualizar dados!");
            }
        } catch (error) {
            console.error("Erro na getDadosTab:", error);
            showToast("Erro ao atualizar dados!");
        }
    };

    // Definindo a função no escopo global
    window.trataStatusConta = async function(checkbox, contaId, mesSelecionado) {
        const paga = checkbox.checked;
        console.log("trataStatusConta() - Conta ID:", contaId, "Mês:", mesSelecionado, "Paga:", paga);

        try {
            const data = await postDados('/marcar-paga', { 
                mes: mesSelecionado, 
                index: contaId, 
                paga: paga 
            });
            
            if (data && data.sucess) {
                showToast("Status atualizado com sucesso!");
                // Atualiza a tabela com os novos dados
                getDadosTab(
                    document.querySelector('#contas-selector-ano').value,
                    document.querySelector('#contas-selector-mes').value
                );
            } else {
                console.error("Resposta inválida do servidor:", data);
                showToast("Erro ao atualizar status!");
                checkbox.checked = !checkbox.checked; // Reverte o checkbox em caso de erro
            }
        } catch (error) {
            console.error("Erro ao atualizar status:", error);
            showToast("Erro ao atualizar status!");
            checkbox.checked = !checkbox.checked; // Reverte o checkbox em caso de erro
        }
    };

    // Exportando a função para o escopo global
    window.validaSelector = function(event) {
        if (event) event.preventDefault(); // Impede o envio padrão do formulário

        const form = document.getElementById('form_selector');
        const anoElement = form.querySelector("#contas-selector-ano"); // Seleciona o ano dentro do formulário
        const mesElement = form.querySelector("#contas-selector-mes"); // Seleciona o mês dentro do formulário

        const ano = anoElement.value; // Pega o valor do ano
        const mes = mesElement.value; // Pega o valor do mês

        // Validando as seleções
        if (ano === "" && mes === "") {
            alert('É necessário selecionar um ano e um mês.'); // Alerta apropriado
        } else if (ano === "") {
            alert('É necessário selecionar um ano.'); // Alerta apropriado
        } else {
            //form.submit(); // Envia o formulário se ambos ano e mês são válidos
            getDadosTab(ano, mes);
        }

        document.querySelector('input[name="mes"]').value = mes;
        document.querySelector('input[name="ano"]').value = ano;
    };

    function formatValor(valor) {
        return `R$ ${Number(valor || 0).toFixed(2).replace('.', ',')}`;
    }

    function atualizaSelects(listaDeAnos, anoSelecionado) {
        const form = document.getElementById('form_selector');
        const select_ano = form.querySelector('#contas-selector-ano');
        const mesElement = form.querySelector("#contas-selector-mes");
        const mes = parseInt(mesElement.value) - 1; // Pega o valor do mês

        const form_add = document.getElementById('form_addLimite');
        const select_add = form_add.querySelector('#contas-selector-ano');

        function_atualizarSelect = true;

        //alert('Ano selecionado - Limite: ' + ano_select_ger_limite + ' - Mês: ' + mes_select_ger_limite)

        // Limpa o select
        select_ano.innerHTML = "";

        if (Array.isArray(listaDeAnos) && listaDeAnos.length > 0) {
            listaDeAnos.forEach(ano => {
                const option = document.createElement("option");
                option.value = ano.ano;
                option.textContent = ano.ano;
                //console.log("Ano currrente: " + ano.ano)
                if (parseInt(ano.ano) === parseInt(anoSelecionado)) {
                    //console.log('Select')
                    option.selected = true;
                }
                select_ano.appendChild(option);
            });
        } else {
            const option = document.createElement("option");
            option.value = "";
            option.textContent = "Nenhum ano disponível";
            select_ano.appendChild(option);
        }

        //getDadosTab(select_ano.value, mesElement.value);
    }

    function atualizaSelectsTipoCartao(tipo_cartao) {
        const form = document.getElementById('modal-form-add-conta');
        const select_tipo_cartao = form.querySelector('#tipo_cartao');

        // Limpa o select
        select_tipo_cartao.innerHTML = "";

        if (Array.isArray(tipo_cartao) && tipo_cartao.length > 0) {
            tipo_cartao.forEach(tipo => {
                const option = document.createElement("option");
                option.value = tipo;
                option.textContent = tipo;
                select_tipo_cartao.appendChild(option);
            });
        } else {
            const option = document.createElement("option");
            option.value = "";
            option.textContent = "Nenhum tipo de cartão disponível";
            select_tipo_cartao.appendChild(option);
        }
    }


    function atualizaTabela(data, mesSelecionado) {
        var tabela = document.getElementById('lista');

        tabela.innerHTML = '<tr><th>Nome</th><th>Vencimento</th><th>Valor</th><th>Paga</th></tr>';

        for (let i = 0; i < data.length; i++) {
            const isChecked = data[i].paga ? "checked" : "";

            tabela.innerHTML += `<tr data-id="${data[i].id}" data-nome="${data[i].nome.replace(/'/g, "\\'")}">
                <td class="nao-selecionavel">${data[i].nome}</td>
                <td class="nao-selecionavel">${data[i].vencimento}</td>
                <td class="nao-selecionavel">R$ ${data[i].valor.toFixed(2).replace('.', ',')}</td>
                <td>
                    <form id="form-status-${data[i].id}" onsubmit="return false;">
                        <input type="hidden" name="mes" value="${mesSelecionado}">
                        <input type="hidden" name="index" value="${data[i].id}">
                        <input type="checkbox" name="paga" value="true" ${isChecked}
                            onchange="trataStatusConta(this, ${data[i].id}, '${mesSelecionado}'); return false;"
                            ontouchstart="this.checked = !this.checked; trataStatusConta(this, ${data[i].id}, '${mesSelecionado}'); return false;" />
                    </form>
                </td>
            </tr>`;
        }
    }

    function atualizaOuRecriaCards(dados) {
        const container = document.querySelector(".total-container");

        if (!container) {
            console.error("Container '.total-container' não encontrado.");
            return;
        }

        const {
            mesSelecionado = '',
            limiteColor = '#eaeaea',
            total_limite = 0,
            total_contas = 0,
            total_contas_pagas = 0,
            total_contas_pendentes = 0
        } = dados;

        try {
            // Cria os cards manualmente e evita innerHTML total
            container.innerHTML = '';

            if (mesSelecionado !== '') {
                const cardLimite = document.createElement("div");
                cardLimite.className = "total-card";
                cardLimite.style.background = limiteColor;
                cardLimite.innerHTML = `
                <h4>Limite mês:</h4>
                <h2 id="card_total_limite">R$ ${parseFloat(total_limite).toFixed(2).replace('.', ',')}</h2>`;
                container.appendChild(cardLimite);
            }

            const cardContas = document.createElement("div");
            cardContas.className = "total-card";
            cardContas.innerHTML = `
            <h4>Total de Contas:</h4>
            <h2 id="card_total_contas">R$ ${parseFloat(total_contas).toFixed(2).replace('.', ',')}</h2>`;
            container.appendChild(cardContas);

            const cardPagas = document.createElement("div");
            cardPagas.className = "total-card";
            cardPagas.innerHTML = `
            <h4>Contas Pagas:</h4>
            <h2 id="card_total_pagas">R$ ${parseFloat(total_contas_pagas).toFixed(2).replace('.', ',')}</h2>`;
            container.appendChild(cardPagas);

            const cardPendentes = document.createElement("div");
            cardPendentes.className = "total-card";
            cardPendentes.innerHTML = `
            <h4>Contas Pendentes:</h4>
            <h2 id="card_total_pendentes">R$ ${parseFloat(total_contas_pendentes).toFixed(2).replace('.', ',')}</h2>`;
            container.appendChild(cardPendentes);

            console.log("Cards atualizados com sucesso.");
        } catch (error) {
            console.error("Erro ao atualizar cards:", error);
        }
    }

    async function trataGerLimite() {

        try {
            const response = await fetch('save_limite', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ ano: ano, mes: mes })
            });


            const { sucess, data, error } = await response.json();
        } catch (error) {

        }
    }

    // Exportando a função para o escopo global
    window.validaFormAdd = async function(event) {
        event.preventDefault(); // Impede o envio padrão

        const form = event.target;
        console.log('Formulário:', form);

        // Coleta os dados do formulário
        const formData = {
            nome: form.querySelector('input[name="nome"]').value,
            vencimento: form.querySelector('input[name="vencimento"]').value,
            valor: form.querySelector('input[name="valor"]').value,
            ano: form.querySelector('input[name="ano"]').value,
            mes: form.querySelector('input[name="mes"]').value,
            categoria: form.querySelector('#categoria').value,
            tipo_cartao: form.querySelector('#tipo_cartao').value
        };

        console.log('Dados do formulário:', formData);

        try {
            const response = await postDados('form_conta', formData);
            console.log('Resposta do servidor:', response);

            if (response.sucess) {
                console.log('Requisição bem sucedida...');
                window.showToast("Conta adicionada com sucesso!");

                // Atualiza os cards e a tabela
                window.atualizaOuRecriaCards({
                    mesSelecionado: response.mesSelecionado,
                    limiteColor: response.limiteColor,
                    total_limite: response.total_limite,
                    total_contas: response.total_contas,
                    total_contas_pagas: response.total_contas_pagas,
                    total_contas_pendentes: response.total_contas_pendentes
                });

                window.atualizaTabela(response.contas, formData.mes);

                // Limpa o formulário
                form.reset();
                
                // Fecha o modal
                window.fecharModal('modal-add-conta');

            } else {
                console.error('Erro no servidor:', response.error);
                window.showToast(response.error || "Erro ao adicionar conta");
            }
        } catch (error) {
            console.error("Erro ao enviar dados do formulário:", error);
            window.showToast("Erro ao adicionar conta");
        }

        return false; // Impede o submit tradicional
    };

    // Exportando outras funções necessárias para o escopo global
    window.atualizaOuRecriaCards = atualizaOuRecriaCards;
    window.atualizaTabela = atualizaTabela;
    window.fecharModal = fecharModal;
    window.showToast = showToast;

    function editarConta() {
        alert("Editar conta ID: " + contaSelecionadaId);
        // Aqui você pode abrir outro modal ou redirecionar para formulário de edição
    }

    function excluirConta() {
        const confirmacao = confirm("Deseja excluir esta conta?");
        if (confirmacao) {
            alert("Excluindo conta ID: " + contaSelecionadaId);
            // Chame fetch ou AJAX para excluir no backend
        }
    }  

    function showToast(message) {
        const toast = document.getElementById("toast");
        toast.innerHTML = message;
        toast.classList.add("show");

        setTimeout(() => {
            toast.classList.remove("show");
        }, 3000); // Duração do toast
    }
</script>

<style>
    .container-toast {
        margin: 0 auto;
        background-color: blue;
    }

    .container-toast .toast {
        visibility: hidden;
        min-width: 250px;
        background-color: #4CAF50;
        /* verde padrão de sucesso */
        color: white;
        text-align: center;
        border-radius: 8px;
        padding: 12px 20px;
        position: fixed;
        z-index: 9999;
        left: 50%;
        bottom: 30px;
        transform: translateX(-50%);
        /* centraliza horizontalmente */
        font-size: 16px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        opacity: 0;
        transition: opacity 0.5s ease, bottom 0.5s ease;
    }

    .container-toast .toast.show {
        visibility: visible;
        opacity: 1;
        bottom: 50px;
    }
</style>

<body>

    <div class="container">
        <h1>Gerenciamento de Contas</h1>

        <!-- Inclusão do Menu -->
        <%- include('menu') %>
        <%- include('partials/gerenciar_cartao') %>
        <%- include('partials/config') %>
        <%- include('partials/adicionar_conta') %>

            <!-- Modal -->
            <%- include('partials/gerenciar_limite') %>
                <%- include('partials/acao_tab') %>

                    <!-- Formulário para Seleção do Mês -->
                    <div class="selector-container">
                        <form action="/" method="GET" id="form_selector" onsubmit="validaSelector(event)">
                            <label for="ano">Ano:</label>
                            <select id="contas-selector-ano" name="ano" onchange="validaSelector(event)">
                                <% if (Array.isArray(anos) && anos.length> 0) { %>
                                    <% anos.forEach(ano=> { %>
                                        <option value="<%= ano.ano %>" <%=anoSelecionado===ano.ano ? 'selected' : '' %>>
                                            <%= ano.ano %>
                                        </option>
                                        <% }); %>
                                            <% } else { %>
                                                <option value="">Nenhum ano disponível</option>
                                                <% } %>
                            </select>

                            <label for="inputMes">Mês:</label>
                            <select name="mes" id="contas-selector-mes" onchange="validaSelector(event)">
                                <option value="" <%=mesSelecionado==="" ? 'selected' : '' %>>Todos</option>
                                <option value="0" <%=mesSelecionado==='0' ? 'selected' : '' %>>Janeiro</option>
                                <option value="1" <%=mesSelecionado==='1' ? 'selected' : '' %>>Fevereiro</option>
                                <option value="2" <%=mesSelecionado==='2' ? 'selected' : '' %>>Março</option>
                                <option value="3" <%=mesSelecionado==='3' ? 'selected' : '' %>>Abril</option>
                                <option value="4" <%=mesSelecionado==='4' ? 'selected' : '' %>>Maio</option>
                                <option value="5" <%=mesSelecionado==='5' ? 'selected' : '' %>>Junho</option>
                                <option value="6" <%=mesSelecionado==='6' ? 'selected' : '' %>>Julho</option>
                                <option value="7" <%=mesSelecionado==='7' ? 'selected' : '' %>>Agosto</option>
                                <option value="8" <%=mesSelecionado==='8' ? 'selected' : '' %>>Setembro</option>
                                <option value="9" <%=mesSelecionado==='9' ? 'selected' : '' %>>Outubro</option>
                                <option value="10" <%=mesSelecionado==='10' ? 'selected' : '' %>>Novembro</option>
                                <option value="11" <%=mesSelecionado==='11' ? 'selected' : '' %>>Dezembro</option>
                            </select>
                        </form>
                    </div>

                    <button class="btn-adicionar" onclick="abrirModal('modal-add-conta')">+ Nova Conta</button>

                    <!-- Exibição de Totais -->
                    <div class="total-container">
                        <% if (mesSelecionado !=='' && mesSelecionado>= 0 && mesSelecionado <= 11) { %>
                                <div class="total-card" style="background: <%= limiteColor %>">
                                    <h4>Limite mês:</h4>
                                    <h2 id="card_total_limite">R$<%= total_limite %>
                                    </h2>
                                </div>
                                <% } %>
                                    <div class="total-card">
                                        <h4>Total de Contas:</h4>
                                        <h2 id="card_total_contas">R$<%= total_contas.toFixed(2).replace('.', ',' ) %>
                                        </h2>
                                    </div>
                                    <div class="total-card">
                                        <h4>Contas Pagas:</h4>
                                        <h2 id="card_total_pagas">R$<%= total_contas_pagas.toFixed(2).replace('.', ',' )
                                                %>
                                        </h2>
                                    </div>
                                    <div class="total-card">
                                        <h4>Contas Pendentes:</h4>
                                        <h2 id="card_total_pendentes">R$<%=
                                                total_contas_pendentes.toFixed(2).replace('.', ',' ) %>
                                        </h2>
                                    </div>
                    </div>


                    <!-- Tabela de Contas -->

                    <div class="table-responsive">
                        <table id="lista">
                            <thead>
                                <tr>
                                    <th>Nome</th>
                                    <th>Vencimento</th>
                                    <th>Valor</th>
                                    <th>Paga</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% contas.forEach((conta)=> { %>
                                    <tr data-id="<%= conta.id %>" data-nome="<%= conta.nome.replace(/'/g, "\\'") %>">
                                        <td class="nao-selecionavel">
                                            <%= conta.nome %>
                                        </td>
                                        <td class="nao-selecionavel">
                                            <%= conta.vencimento %>
                                        </td>
                                        <td class="nao-selecionavel">R$<%= conta.valor.toFixed(2).replace('.', ',' ) %>
                                        </td>
                                        <td>
                                            <input type="checkbox" 
                                                name="paga" 
                                                value="true" 
                                                <% if (conta.paga) { %> checked <% } %>
                                                onchange="trataStatusConta(this, <%= conta.id %>, '<%= mesSelecionado %>')"
                                                ontouchstart="this.checked = !this.checked; trataStatusConta(this, <%= conta.id %>, '<%= mesSelecionado %>'); return false;" />
                                        </td>
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>

                    <button id="installApp" style="display:none;">Instalar app</button>

                    <!-- Rodapé -->
                    <footer>
                        <p>&copy; 2025 - JVTSistemas</p>
                    </footer>
    </div>

    <script type="module" src="/public/js/utils/util.js"></script>
    <script src="/public/js/index/script.js"></script>
    <script src="/public/js/index/modal/script_ger_limite.js"></script>
    <script type="module" src="/public/js/index/modal/script_config.js"></script>
    <script type="module" src="/public/js/utils/services.js"></script>

    <script>
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/service-worker.js')
                .then(() => console.log("Service Worker registrado com sucesso!"));
        }

        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault(); // Impede o comportamento automático
            let deferredPrompt = e;

            // Você pode mostrar um botão de "Instalar app"
            const installBtn = document.getElementById('installApp');
            installBtn.style.display = 'block';

            installBtn.addEventListener('click', () => {
                deferredPrompt.prompt();
                deferredPrompt.userChoice.then((choiceResult) => {
                    if (choiceResult.outcome === 'accepted') {
                        console.log('Usuário aceitou instalar o app');
                    } else {
                        console.log('Usuário rejeitou');
                    }
                    deferredPrompt = null;
                });
            });
        });
    </script>

    <div id="container-toast" class="container-toast">
        <div id="toast" class="toast">Dados inseridos com sucesso!</div>
    </div>


</body>

</html>